## Provide a k8s version to auto dashboard import script example: kubeTargetVersionOverride: 1.16.6
kubeTargetVersionOverride: "{{ K8S_VER }}"

## Provide a name in place of kube-prometheus-stack for `app:` labels
##
fullnameOverride: "k8s"
cleanPrometheusOperatorObjectNames: true

## Configuration for alertmanager
alertmanager:
  alertmanagerSpec:
    image:
      registry: {{ DST_REGISTRY_ALL }}
  service:
    nodePort: 30902
    type: NodePort

## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
grafana:
  enabled: false
  adminUser: admin
  adminPassword: Admin1234!
  image:
    repository: {{ DST_REGISTRY_ALL }}/prometheus/grafana 
  service:
    nodePort: 30903
    type: NodePort
  sidecar:
    image:
      repository: {{ DST_REGISTRY_ALL }}/prometheus/k8s-sidecar 
    skipTlsVerify: true


## Component scraping the kube api server
kubeApiServer:
  enabled: true

## Component scraping the kubelet and kubelet-hosted cAdvisor
kubelet:
  enabled: true

## Component scraping the kube controller manager
kubeControllerManager:
  enabled: true
  endpoints:
{% for h in groups['kube_master'] %}
  - {{ h }}
{% endfor %}
  service:
    port: 10257
    targetPort: 10257
  serviceMonitor:
    https: true
    insecureSkipVerify: true
    serverName: localhost

## Component scraping coreDns. Use either this or kubeDns
coreDns:
  enabled: true

## Component scraping etcd
kubeEtcd:
  enabled: true
  endpoints:
{% for h in groups['etcd'] %}
  - {{ h }}
{% endfor %}
  service:
    port: 2379
    targetPort: 2379
  serviceMonitor:
    scheme: https
    insecureSkipVerify: true
    serverName: localhost
    caFile: /etc/prometheus/secrets/etcd-client-cert/etcd-ca
    certFile: /etc/prometheus/secrets/etcd-client-cert/etcd-client
    keyFile: /etc/prometheus/secrets/etcd-client-cert/etcd-client-key

## Component scraping kube scheduler
kubeScheduler:
  enabled: true
  endpoints:
{% for h in groups['kube_master'] %}
  - {{ h }}
{% endfor %}
  service:
    port: 10259
    targetPort: 10259
  serviceMonitor:
    https: true
    insecureSkipVerify: true

## Component scraping kube proxy
kubeProxy:
  enabled: true
  endpoints:
{% for h in groups['kube_master'] %}
  - {{ h }}
{% endfor %}
{% for h in groups['kube_node'] %}
{% if h not in groups['kube_master'] %}
  - {{ h }}
{% endif %}
{% endfor %}

kubeStateMetrics:
  enabled: true

## Configuration for kube-state-metrics subchart
kube-state-metrics:
  image:
    registry: {{ DST_REGISTRY }}
    repository: {{ DST_REGISTRY_PREFIX }}/prometheus/kube-state-metrics

## Configuration for prometheus-node-exporter subchart
prometheus-node-exporter:
  image:
    registry: {{ DST_REGISTRY }}
    repository: {{ DST_REGISTRY_PREFIX }}/prometheus/node-exporter

## Manages Prometheus and Alertmanager components
prometheusOperator:
  enabled: true
  admissionWebhooks:
    enabled: true
    patch:
      enabled: true
      image:
        registry: {{ DST_REGISTRY }}
        repository: {{ DST_REGISTRY_PREFIX }}/prometheus/kube-webhook-certgen
        tag: v1.5.1
  image:
    registry: {{ DST_REGISTRY }}
    repository: {{ DST_REGISTRY_PREFIX }}/prometheus/prometheus-operator
  service:
    nodePort: 30899
    nodePortTls: 30900
    type: NodePort
  prometheusConfigReloader:
    image:
      registry: {{ DST_REGISTRY }}
      repository: {{ DST_REGISTRY_PREFIX }}/prometheus/prometheus-config-reloader

## Deploy a Prometheus instance
prometheus:
  enabled: true
  service:
    nodePort: 30901
    type: NodePort

  prometheusSpec:
    image:
      registry: {{ DST_REGISTRY_ALL }}
    retention: 30d
    replicas: 2
    secrets:
    - etcd-client-cert

    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: prometheus-local-storage
          volumeMode: Filesystem
          resources:
            requests:
              storage: 100Gi
